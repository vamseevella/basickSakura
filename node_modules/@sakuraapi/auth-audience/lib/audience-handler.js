"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@sakuraapi/core");
const jsonwebtoken_1 = require("jsonwebtoken");
let AuthAudience = class AuthAudience {
    constructor(authenticators) {
        this.authenticators = authenticators;
    }
    authenticate(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            let firstFailure;
            for (const auth of this.authenticators) {
                const authAttempt = yield auth(req, res);
                if (authAttempt && !authAttempt.success && !firstFailure) {
                    firstFailure = authAttempt;
                }
                else {
                    return authAttempt;
                }
            }
            return firstFailure;
        });
    }
};
AuthAudience = __decorate([
    core_1.AuthenticatorPlugin(),
    __metadata("design:paramtypes", [Array])
], AuthAudience);
exports.AuthAudience = AuthAudience;
function addAuthAudience(sapi, options) {
    options = options || {};
    options.audience = options.audience
        || ((sapi.config.authentication || {}).jwt || {}).audience
        || undefined;
    options.authHeader = options.authHeader || 'Authorization';
    options.authScheme = (options.authScheme === '') ? '' : options.authScheme || 'Bearer';
    options.issuer = options.issuer
        || ((sapi.config.authentication || {}).jwt || {}).issuer
        || undefined;
    options.jwtVerifyOptions = options.jwtVerifyOptions || {
        audience: options.audience,
        issuer: options.issuer
    };
    options.key = options.key
        || (((sapi.config || {}).authentication || {}).jwt || {}).key
        || '';
    options.onAuthorized = options.onAuthorized || ((payload, req, res) => __awaiter(this, void 0, void 0, function* () {
        res.locals.jwt = payload;
    }));
    options.onVerifyError = options.onVerifyError || ((err, token, req, res) => __awaiter(this, void 0, void 0, function* () {
        return null;
    }));
    options.serverErrorStatusCode = options.serverErrorStatusCode || 500;
    options.serverErrorJson = options.serverErrorJson || (() => __awaiter(this, void 0, void 0, function* () {
        return null;
    }));
    options.unauthorizedStatusCode = options.unauthorizedStatusCode || 401;
    options.unauthorizedJson = options.unauthorizedJson || (() => __awaiter(this, void 0, void 0, function* () {
        return null;
    }));
    options.badRequestStatusCode = options.badRequestStatusCode || 400;
    options.badRequestJson = options.badRequestJson || (() => __awaiter(this, void 0, void 0, function* () {
        return null;
    }));
    function jwtAudienceHandler(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            let token;
            try {
                const authHeader = req.get(options.authHeader || 'Authorization');
                if (!authHeader) {
                    const err = Error('NO_AUTHORIZATION_HEADER');
                    token = '';
                    return {
                        data: yield options.onVerifyError(err, token, req, res),
                        error: err,
                        status: options.unauthorizedStatusCode,
                        success: false
                    };
                }
                const authHeaderParts = (authHeader)
                    ? authHeader.split(' ')
                    : [];
                if (options.authScheme === '' || authHeaderParts.length === 1) {
                    if (authHeader === options.authScheme) {
                        const missingAuthTokenErr = new Error('NO_AUTH_TOKEN');
                        return {
                            data: yield options.badRequestJson(missingAuthTokenErr, req, res),
                            error: missingAuthTokenErr,
                            status: options.badRequestStatusCode,
                            success: false
                        };
                    }
                    token = authHeader;
                }
                else if (authHeaderParts.length === 2) {
                    if (authHeaderParts[0].toLowerCase() !== options.authScheme.toLowerCase()) {
                        const unexpectedAuthSchemeErr = new Error('UNEXPECTED_AUTH_SCHEME');
                        return {
                            data: yield options.badRequestJson(unexpectedAuthSchemeErr, req, res),
                            error: unexpectedAuthSchemeErr,
                            status: options.badRequestStatusCode,
                            success: false
                        };
                    }
                    token = authHeaderParts[1];
                }
                else {
                    const unexpectedAuthHeaderContentErr = new Error('UNEXPECTED_AUTH_HEADER_CONTENT');
                    return {
                        data: yield options.badRequestJson(unexpectedAuthHeaderContentErr, req, res),
                        error: unexpectedAuthHeaderContentErr,
                        status: options.badRequestStatusCode,
                        success: false
                    };
                }
            }
            catch (err) {
                return {
                    data: yield options.serverErrorJson(err, req, res),
                    error: err,
                    status: options.serverErrorStatusCode,
                    success: false
                };
            }
            try {
                const payload = yield verifyJwt(token, options.key, options.jwtVerifyOptions);
                return {
                    data: yield options.onAuthorized(payload, req, res),
                    status: 200,
                    success: true
                };
            }
            catch (err) {
                return {
                    data: yield options.onVerifyError(err, token, req, res),
                    error: err,
                    status: options.unauthorizedStatusCode,
                    success: false
                };
            }
        });
    }
    const authenticators = [
        new AuthAudience([jwtAudienceHandler])
    ];
    return {
        authenticators
    };
}
exports.addAuthAudience = addAuthAudience;
function verifyJwt(token, key, jwtVerifyOptions) {
    return new Promise((resolve, reject) => {
        jsonwebtoken_1.verify(token, key, jwtVerifyOptions, (err, payload) => {
            (err) ? reject(err) : resolve(payload);
        });
    });
}
//# sourceMappingURL=audience-handler.js.map