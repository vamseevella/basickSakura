/// <reference types="express" />
import { AuthenticationHandler, AuthenticatorPluginResult, IAuthenticator, IAuthenticatorConstructor, SakuraApi, SakuraApiPluginResult } from '@sakuraapi/core';
import { Request, Response } from 'express';
export declare type jsonBuilder = (req: Request, res: Response) => Promise<any>;
export declare type jsonErrBuilder = (err: any, req: Request, res: Response) => Promise<any>;
export declare type authorizedHandler = (jwtPayload: any, req: Request, res: Response) => Promise<any>;
export declare type verifyErrorHandler = (err: Error, jwtPayload: any, req: Request, res: Response) => Promise<any>;
export interface IAuthAudienceOptions {
    audience?: string;
    authHeader?: string;
    authScheme?: string;
    issuer?: string;
    jwtVerifyOptions?: any;
    key?: string;
    onAuthorized?: authorizedHandler;
    onVerifyError?: verifyErrorHandler;
    serverErrorStatusCode?: number;
    serverErrorJson?: jsonErrBuilder;
    unauthorizedStatusCode?: number;
    unauthorizedJson?: jsonBuilder;
    badRequestStatusCode?: number;
    badRequestJson?: jsonErrBuilder;
}
export declare class AuthAudience implements IAuthenticator, IAuthenticatorConstructor {
    private authenticators;
    constructor(authenticators: AuthenticationHandler[]);
    authenticate(req: any, res: any): Promise<AuthenticatorPluginResult>;
}
export declare function addAuthAudience(sapi: SakuraApi, options: IAuthAudienceOptions): SakuraApiPluginResult;
